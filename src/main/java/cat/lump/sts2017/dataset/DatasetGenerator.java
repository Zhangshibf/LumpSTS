package cat.lump.sts2017.dataset;

import java.io.File;
import java.util.Locale;

import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.lang.enums.EnumUtils;
import org.ini4j.Profile.Section;

import cat.lump.aq.basics.check.CHK;
import cat.lump.aq.basics.log.LumpLogger;
import cat.lump.sts2017.LumpIni;
import cat.lump.sts2017.prepro.Annotator;

/**
 * @author albarron
 *
 */
public class DatasetGenerator {

  /** Available languages in our collection/task */
  private  enum LANGUAGES {en, ar, es};
  
  private static final String CLI_FLAG_CONFIG = "c";
  private static final String CLI_FLAG_LAN1 = "l";
  private static final String CLI_FLAG_LAN2 = "m";
  private static final String CLI_FLAG_FOLDS = "f";
  private static final String CLI_FLAG_SHUFFLE = "s";
  
  /** Number of folds generated by default is 1: one single file generated */
  private static final int DEFAULT_FOLDS = 1;
  
  /** Default behaviour regarding shufling data (it is set as false) */
  private static final boolean DEFAULT_SHUFFLE = false;
  
  private final String LANGUAGE_1;
  
  private final String LANGUAGE_2;
  
  private final int FOLDS;
  
  private final boolean SHUFFLE;
  
  /** Configuration file section */
  private final Section section;

  /** Logger */
  private static LumpLogger logger = 
      new LumpLogger (DatasetGenerator.class.getSimpleName());

  public DatasetGenerator(String language, int folds, boolean shuffle, String iniFile) {
    this(language, language, folds, shuffle, iniFile);
  }
  
  public DatasetGenerator(String lan1, String lan2, int folds, boolean shuffle, String iniFile) {
    checkLanguageExists(lan1);
    checkLanguageExists(lan2);
    LANGUAGE_1 = lan1;
    LANGUAGE_2 = lan2;
    FOLDS = validateFolds(folds);
    SHUFFLE = shuffle;
    
    section = LumpIni.getProperties(iniFile);
    //AQUI VOY
    // Rather than an annotatorFactory now we need a DATASET handler (files, partitions, etc)
    // Then we can load all the datasets and mix them
    // TODO we still need to define how to select just specific datasets. I guess this should 
    // be done from the ini
    
  }
  
  /**
   * Check if the given language is among those available. The code crashes if 
   * language is not in the enum LANGUAGES
   * @param language
   *              a two-character language code
   */
  private void checkLanguageExists(String language) {
    @SuppressWarnings("unused")
    LANGUAGES kk;
    try {
      kk = LANGUAGES.valueOf(language);
      //yes
    } catch (IllegalArgumentException ex) {
      logger.error("Unexpected language: " + ex.getMessage());
      //TODO confirm that this crashes
    }
  }
  
  private int validateFolds(int folds) {
    CHK.CHECK(folds > 0, "The number of folds must be > 0");
    //TODO the other condition should be < SIZE_OF_THE_DATA, but we don't know that right now
    return folds;
  }
  
  
  private static CommandLine parseArguments(String[] args) {
    HelpFormatter formatter = new HelpFormatter();

    Options options = new Options();
    options.addOption(CLI_FLAG_CONFIG, "config", true,
        "Configuration file for the lumpSTS project");
    options.addOption(CLI_FLAG_LAN1, "lang1", true,
          "Language of the text");
    options.addOption(CLI_FLAG_LAN2, "lang2", true, 
        "Second language (optional, if cross-language)");
    options.addOption(CLI_FLAG_FOLDS, "folds", true,
        "Number of folds (default: 1)");
    options.addOption(CLI_FLAG_SHUFFLE, "shuffle", false,
        "Shuffle the data before combining and folding (default: false)");
    
    CommandLineParser parser = new BasicParser();
    CommandLine cLine = null;
    try {
      cLine = parser.parse(options, args);
    } catch (ParseException exp ) {
      logger.error("Unexpected exception: " + exp.getMessage());
    }
    
    if (cLine.hasOption("h")) {
      formatter.printHelp(DatasetGenerator.class.getSimpleName(), options);
      System.exit(0);
    }

    if (cLine == null || !(cLine.hasOption(CLI_FLAG_LAN1))) {
      logger.error("Please, set the language\n");
      formatter.printHelp(Annotator.class.getSimpleName(),options );
      System.exit(1); 
    }
    
    if (cLine.hasOption(CLI_FLAG_LAN2) || !(cLine.hasOption(CLI_FLAG_LAN1)) ) {
      logger.error("If working in one language, use -" + CLI_FLAG_LAN1
          + "; if cross-language, set -" + CLI_FLAG_LAN1 + "as well");
      formatter.printHelp(Annotator.class.getSimpleName(),options );
      System.exit(1);
    }
    
    return cLine;
  }
  
  
  public static void main(String[] args) {
    CommandLine cLine = parseArguments(args);
    
    // Language
    String lan1 = cLine.getOptionValue(CLI_FLAG_LAN1);
    String lan2 = null;
    int folds = DEFAULT_FOLDS;
    boolean shuffle = DEFAULT_SHUFFLE;
    if (cLine.hasOption(CLI_FLAG_LAN2)) {
      lan2 = cLine.getOptionValue(CLI_FLAG_LAN2);
    }
    
    if (cLine.hasOption(CLI_FLAG_FOLDS)) {
      folds = Integer.parseInt( cLine.getOptionValue(CLI_FLAG_FOLDS) );
    }
    
    if (cLine.hasOption(CLI_FLAG_SHUFFLE)) {
      shuffle = Boolean.parseBoolean(cLine.getOptionValue(CLI_FLAG_SHUFFLE));
    }
    
    String conf = cLine.getOptionValue(CLI_FLAG_CONFIG);
    String confFile;
    if (conf.startsWith(File.separator)) {
      confFile = conf;
    } else {
      confFile = System.getProperty("user.dir") + File.separator + conf;
    }
    
    //Run
    DatasetGenerator dg;
    
    if (lan2.equals(null)) {
      dg = new DatasetGenerator(lan1, folds, shuffle, confFile);
    } else {
      dg = new DatasetGenerator(lan1, lan2, folds, shuffle, confFile);
    }
    
    
  }
  
}
