package cat.lump.sts2017.dataset;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import cat.lump.aq.basics.check.CHK;
import cat.lump.aq.basics.log.LumpLogger;

/**
 * @author albarron
 *
 */
public class DatasetGenerator {
  
  /** Number of folds generated by default is 1: one single file generated */
  private static final int DEFAULT_FOLDS = 1;
  
  private final int MAX_FOLDS = 20;
  
  /** Default behaviour regarding shufling data (it is set as false) */
//  private static final boolean DEFAULT_SHUFFLE = false;
  
  private static final String DEFAULT_BASE_PATH = "/data/alt/corpora/semeval2017/task1";
  
  private final String BASE_PATH;
  
  private  String LANGUAGE;
    
  private int FOLDS;
    
  /** Configuration file section */
//  private final Section section;

  /** Logger */
  private static final LumpLogger logger = 
      new LumpLogger (DatasetGenerator.class.getSimpleName());
  
  private final DatasetHandlerInterface dha;

  public DatasetGenerator(String language, int folds, String corpusPath) {
    //this(language, language, folds, shuffle, iniFile);
    
    FOLDS = validateFolds(folds);
    LANGUAGE = language;
    BASE_PATH = corpusPath;

    dha = DatasetHandlerFactory.getDatasetHandler(LANGUAGE, corpusPath);
    logger.info("Set language: " + LANGUAGE);
    logger.info("Number of folds: " + FOLDS);
    logger.info("Path to the corpus: " + BASE_PATH);
   
  }
  
  public DatasetGenerator(String lan1, String lan2, int folds, String corpusPath) {
    dha = DatasetHandlerFactory.getDatasetHandler(lan1, lan2, corpusPath); 
    
    LANGUAGE = dha.getLanguage();
//    LANGUAGE_2 = lan2;
    FOLDS = validateFolds(folds);
    BASE_PATH = corpusPath;
    
    logger.info("Set language pair: " + LANGUAGE);
    //TODO CHANGE THIS
//    logger.info("Set language 2:" + lan2 ); 
    logger.info("Number of folds: " + FOLDS);
    logger.info("Path to the corpus: " + BASE_PATH);
  }
  

  public void generateFolds() throws IOException {
    // generate the folder with the current timestamp
    File dir = new File(getFolderName());
    logger.info(String.format("Creating folder %s", dir));
    dir.mkdir();
    
    //Setup the writers for all the folds.
    List<BufferedWriter> writers = new ArrayList<BufferedWriter>();
    int i;
    for (i = 0; i < FOLDS; i++) {
      writers.add(new BufferedWriter( 
          new FileWriter(getFoldFileName(dir.toString(), i))));
    }
    
    logger.info(String.format("Creating %d folds", i));
    
    i = 0;
      List<String> lines = dha.getInstances();
          //FileIO.fileToLines(new File(getInputFileFullPath(f)));
      
      for (String line : lines) {
        writers.get(i).write(line); // we write line j into file i
        writers.get(i++).write("\n");   // and add a line break
        if (i==FOLDS) {   // reset the file counter; another option would be a module
          i = 0;
        }
      }      
    

    // Now we close all the writers
    for (i = 0; i < FOLDS; i++) {
      writers.get(i).close();
    }
    logger.info("Have a nice day");
  }
  
  public void selectDatasets() throws IOException {
    BufferedReader scanner = new BufferedReader(new InputStreamReader(System.in));
    
    System.out.println("Include every subcorpus available? [y,n] (y if empty)");
    if (yesOrEmpty(scanner.readLine().trim())) {
      dha.activateAllCorpus();
      return;
    }
    
    for (String availableCorpus : dha.getAvailableCorpora()) {
      System.out.format("Include corpus %s? [y,n] (y if empty)%n", availableCorpus);
      if (yesOrEmpty(scanner.readLine().trim())) {
        dha.activateCorpus(availableCorpus);
//        requiredCorpora.put(availableCorpus.getKey(), availableCorpus.getValue());
      }
    }
    
    
  }
  
  


  private int validateFolds(int folds) {
    CHK.CHECK(folds > 0 && folds <=MAX_FOLDS, 
        String.format("The number of folds must be 0 < folds <= %s", MAX_FOLDS));
    return folds;
  }
  
  private String getFoldFileName(String path, int i) {
    return String.format("%s%s%s.%d.txt", 
        path, 
        File.separator, 
        dha.getLanguage(), 
        i);
  }

  /**
   * Combines the base path to the corpus with the language (pair) and the 
   * timestamp in order to generate one unique folder with the newly generated 
   * dataset.
   * 
   * @return
   *        [BASE_PATH]/[lang].[timestamp]
   */     
  private String getFolderName() {
    // TODO LANGUAGE WILL EVENTUALLY BECOME PAIR OR SINGLE
    // DECIDE IF IT COMES FROM HANDLER OR FROM THIS CLASS
    Date now = new Date();
    SimpleDateFormat dateFormat = new SimpleDateFormat("M_D_hh_mm_ss");
    String outPath = String.format("%s%s%s.%s", BASE_PATH, File.separator, LANGUAGE, dateFormat.format(now) );
    return outPath;
  }
  


//  public void getFolds() {
//    //TODO RETURN SOMETHING
//  }
//  
//  public void getFold(int i) {
//    //TODO return one single fold
//  }
  

  
 
  
  /**
   * Assumes that an empty answer is equivalent to y (yes).
   * 
   * @param option 
   *          a String containing y, n, or empty
   * @return
   *          true if empty or y
   */
  private boolean yesOrEmpty(String option) {
    if (option.isEmpty() || option.equals("y")) {
      return true;
    }
    return false;
  }
  
  
  public static void main(String[] args) throws IOException {
    // A scanner allows us for reading from he command line
    BufferedReader scanner = new BufferedReader(new InputStreamReader(System.in));
    
    // Getting the language(s)
    System.out.println("Enter the first language [ar, en, es]: ");
    String lan1 = scanner.readLine();
    DatasetHandlerFactory.checkLanguageExists(lan1);
  
    System.out.println("Enter the second language [ar, en, es] (monolingual if empty): ");
    String tLan2 = scanner.readLine().trim();
    String lan2 = (tLan2.isEmpty()) 
        ? null 
        : tLan2;
    if (lan2 != null) { 
      DatasetHandlerFactory.checkLanguagePairExists(lan1, lan2); 
      if (lan1.equals(lan2)) {
        logger.error("I cannot set up CL with the same language on both sides");
      }
    }
    
    // Getting the number of folds
    System.out.format("Enter the number of desired folds (%d if empty): %n", DEFAULT_FOLDS);
    String sFolds = scanner.readLine().trim();
    int folds = sFolds.isEmpty()
        ? DEFAULT_FOLDS
        : Integer.valueOf(sFolds);
    
//    // Shuffling
//    System.out.format(
//        "Shuffle the data before mixing? (%b if empty; contrary otherwise): %n", 
//        DEFAULT_SHUFFLE);
//    String sShuffle = scanner.readLine().trim();
//    boolean shuffle = sShuffle.isEmpty() ? DEFAULT_SHUFFLE : true;
    
    
    System.out.format("Parent path to the dataset (default: %s) %n", 
        DEFAULT_BASE_PATH);
        
    String corpusPath = scanner.readLine().trim();

    if (corpusPath.isEmpty()) { corpusPath = DEFAULT_BASE_PATH; }
    
    String basePath = corpusPath.startsWith(File.separator) 
        ? corpusPath 
        : System.getProperty("user.dir") + File.separator + corpusPath;
    
//    System.out.println(lan1);
//    System.out.println(lan2);
//    System.out.println(folds);
////    System.out.println(shuffle);
//    System.out.println(basePath);

    
    //    //Run
    DatasetGenerator dg;
    
    if (lan2 == null) {
      dg = new DatasetGenerator(lan1, folds, basePath);
    } else {
      dg = new DatasetGenerator(lan1, lan2, folds, basePath);
    }
    
    dg.selectDatasets();
    dg.generateFolds();
    
  }

    
}
